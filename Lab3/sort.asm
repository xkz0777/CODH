# use selection sort
.data
ARRAY:
.word 0x262e, 0x171b, 0x5c7b, 0x7535, 0x4b47, 0x69b9, 0x177e, 0x423c, 0xec6, 0xcc9b, 0xfc8c, 0xca03, 0xbc1f, 0xb134, 0x84ae, 0x565c, 0x52f1, 0xd353, 0xaa49, 0xefae, 0x25f6, 0xdb73, 0x40b4, 0x4edd, 0xfd95, 0x1718, 0x6838, 0x3d78, 0xe430, 0x6e95, 0x3167, 0xa543, 0x789d, 0xf779, 0xec2e, 0x6a20, 0x33ed, 0xaeea, 0xf371, 0x14d3, 0xcdb6, 0xe9b7, 0x2dab, 0xae93, 0x2e72, 0xb82f, 0xb740, 0xdec4, 0x1c5f, 0xe3cb, 0x94c1, 0x93f3, 0x4d7e, 0xd9ba, 0xeada, 0xaeed, 0xf08f, 0xa17c, 0xa03b, 0x1faf, 0xe0ff, 0x4e40, 0xa313, 0x6508, 0xbcf2, 0x72eb, 0xf342, 0x70e8, 0xfaaf, 0x2f7c, 0x3de0, 0x995d, 0x8214, 0x2885, 0xbd25, 0x3175, 0xb944, 0x47d5, 0x4187, 0xa1b3, 0xf1f8, 0xba31, 0x3011, 0x87bb, 0xf866, 0x6cd0, 0x3c4d, 0xf028, 0xa7e4, 0xbe3d, 0x1ce5, 0x7f07, 0x99a8, 0x2b0, 0xaf0f, 0x532b, 0x5a66, 0x1d7c, 0x8c5d, 0x20ca, 0x36de, 0x6154, 0x9ccf, 0x385, 0x38ef, 0x9e70, 0x2f85, 0x6584, 0x8c28, 0xc0fc, 0x6c88, 0x5bb5, 0x3972, 0xd029, 0x8715, 0x99cc, 0x61e0, 0x6b53, 0xd032, 0x6f0b, 0x9cd6, 0xa3d0, 0x1f74, 0xfaff, 0xd512, 0x7617, 0x5fba, 0x63d2, 0x65c6, 0x9d18, 0x31d6, 0x8ddf, 0xed04, 0xff1b, 0xbc0, 0x3e05, 0xb8a1, 0xfff9, 0x3912, 0x8bd6, 0xabb, 0xd9be, 0x45bc, 0xbb6, 0x4368, 0xe2a1, 0x18bf, 0xe405, 0x944a, 0xc639, 0x5fab, 0x2c3d, 0xd51d, 0x639d, 0x14ca, 0xa990, 0xa175, 0x6368, 0x7e88, 0xb1b3, 0x198b, 0x7044, 0x59ef, 0xf23, 0x5c54, 0x1db0, 0x698, 0x79cc, 0x1f40, 0xc6e, 0x752b, 0x8b58, 0x40ae, 0xa526, 0xa7d7, 0x837c, 0x9512, 0x691a, 0x68de, 0x338a, 0xbcbf, 0xda32, 0xfcc0, 0x9842, 0x6017, 0xe90, 0x3c46, 0x9ab5, 0x57a2, 0xc157, 0x5db2, 0xf77, 0x718a, 0x9140, 0xb686, 0xbe3, 0xf156, 0x8807, 0x7f75, 0xaa39, 0x9e00, 0xcb95, 0x63fd, 0xe2ae, 0x4d9f, 0x99d3, 0xe34a, 0x255b, 0x8735, 0xd1bb, 0x1e60, 0xeb79, 0x983e, 0xa118, 0xa008, 0x5a9d, 0xa610, 0x101b, 0xc979, 0x325c, 0x7406, 0x74e6, 0x682f, 0x8d29, 0xf8c7, 0x2daa, 0x9b29, 0xce23, 0x6a96, 0x9a18, 0xae5, 0xf7dc, 0x3340, 0xe7f6, 0xf479, 0xc0b6, 0xc15f, 0x7dab, 0x37e3, 0xbf29, 0xf1ab, 0xc2cb, 0xbbc0, 0x4035, 0xf99a, 0xf16c, 0x3be2, 0xdb4d, 0x35cf, 0xf3c1, 0x70e5, 0x766e, 0x3145, 0x2580, 0x209f, 0x2929

SIZE:
.word 256

# MMI
RDR: # Receiver Data register, input data in low-order byte
.word 0x00007f04
RCR: # Receiver Control register, lower-order bit set to 1 when ready
.word 0x00007f00

# MMO
TCR: # Transmitter Control register
.word 0x00007f08
TDR: # Transmitter Data register
.word 0x00007f0c

.text
lw t0, SIZE
add t1, zero, zero # t1: i
OUTER:
addi t2, t1, 1 # t2: j
add t3, t1, zero # t3: min_index
INNER:
slli s2, t2, 2
lw t4, (s2) # t4: array[j]
slli s3, t3, 2
lw t5, (s3) # t5: array[min_index]
bge t4, t5, ADD # if array[j] >= array[min_index] skip next
add t3, t2, zero
ADD:
addi t2, t2, 1
blt t2, t0, INNER

add a2, t1, zero
add a3, t3, zero
jal SWAP

addi t1, t1, 1
addi a6, t0, -1
blt t1, a6, OUTER
j PRINT

SWAP: # swap a2 and a3
slli s1, a2, 2
slli s2, a3, 2

lw t4, (s1)
lw t5, (s2)
sw t4, (s2)
sw t5, (s1)
ret

PRINT:
add a2, zero, zero
lw a3, SIZE
slli a3, a3, 2
lw a4, TDR
addi a5, zero, 8 # every word output 9 times
addi a6, a5, 20
addi a7, zero, 10 # ascii code for '\n'

WAIT: # Check if tcr is ready
lw t0, TCR
lw t0, (t0)
addi t1, zero, 1
and t1, t1, t0
beqz t1, WAIT

lw t2, (a2) # Load a word
srl t3, t2, a6 # shift right to display high-order bits first
andi t3, t3, 0xf

bge t3, a7, LETTER
addi t3, t3, 0x30
j STORE
LETTER:
addi t3, t3, 0x37

STORE:
bnez a5, CHAR # if a5 is zero, output '\n'
sw a7, (a4)
j END_STORE
CHAR:
sw t3, (a4)
END_STORE:

addi a5, a5, -1
addi a6, a6, -4
blt a5, zero, RESTORE
j WAIT

RESTORE:
addi a5, zero, 8
addi a6, a5, 20
addi a2, a2, 4
blt a2, a3, WAIT
